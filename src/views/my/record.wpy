<template lang="pug">
    view.container
        Nav(
            :showIcon.sync="showIcon" 
            title="足迹"
        )
        view.tabs_box(
            style="top:{{titleBarHeight}}px;"
        )
            view.picker_type_box
                picker.picker_type(
                    @change="toggleTabs"
                    value="{{classifyIndex}}" 
                    range="{{classify}}"
                    range-key="name"
                )
                    view {{classify[classifyIndex].name}}
            view.picker_time_box
                picker.picker_time(
                    @change="toggleTimes"
                    value="{{timeIndex}}" 
                    range="{{time}}"
                    range-key="name"
                ) 
                    view {{time[timeIndex].name}}
            view.toggle_view(
                @tap.stop="isToggleView"
            )
                text.icon(
                    class="icon_view{{toggleView ? '3': '2'}}"
                )
        view.list_box(
            class="view{{toggleView ? '3': '2'}}"
        )
            block(
                wx:for="{{list}}"
                wx:key="this"
            )
                view.item(
                    @tap.stop="details({{item._id}})"
                )
                    view.item_imgs
                        image(
                            src="{{item.file_id}}"
                        )
                    view.item_info
                        view.item_name.ac
                            | 识别结果: 
                            block(
                                wx:if="{{item.baike_result_list}}"
                            )
                                text {{item.baike_result_list.length}}
                            block(
                                wx:else
                            )
                                text {{item.baike_result.words_result_num}}
                        view.item_date.ac {{item.created_at}}
        view.result_none.ac(
            wx:if="{{none}}"
        ) —— 暂无更多 ——
</template>

<script>
    import wepy from 'wepy'
    import Nav from '@/components/nav'
    import {
        getAnalysisList
    } from '@/service/api/analysis'
    import {
        showModal,
        showToast
    } from '@/utils'
    export default class Record extends wepy.page {
        config = {
            navigationBarTitleText: '识别记录',
            // 页面禁止右滑返回手势
            disableSwipeBack: true,
            enablePullDownRefresh: true,
            navigationStyle: 'custom',
        }
        components = {
            Nav
        }
        // 监控tabs的变化
        watch = {
            classifyIndex(newValue, oldValue){
                this.page = 1
                this.none = false
                this.getList('PullDown')
            },
            timeIndex(newValue, oldValue){
                this.page = 1
                this.none = false
                this.getList('PullDown')
            }
        }
        methods = {
            isToggleView() {
                this.toggleView = !this.toggleView
            },
            // 切换分类
            toggleTabs({
                detail
            }) {
                this.classifyIndex = detail.value
            },
            // 切换时间
            toggleTimes({
                detail
            }) {
                this.timeIndex = detail.value
            },
            // 详情
            details(id) {
                this.$navigate(`/views/my/record_details`, {
                    id
                })
            },
            // 删除记录
            async delIdentification(id, index) {
                try {
                    let {
                        confirm
                    } = await showModal({
                        title: '提示',
                        content: '是否删除记录？'
                    })
                    if(!confirm) return false 
                    // 删除
                    let data = await delIdentification(id)
                    // 删除当前索引值所在的数组项
                    this.list.splice(index, 1)
                } catch (error) {
                    console.log(error)
                } finally {
                    this.$apply()
                }
            },
            // 在广场展示
            async setPlaza(id, index, mark) {
                try {
                    let data = await setPlaza(id, mark)
                    showToast({
                        title: `设置成功`,
                        icon: 'success'
                    })
                    this.list[index].delete = !mark ? 1 : 0
                } catch (error) {
                    console.log(error)
                } finally {
                    this.$apply()
                }
            }

        }
        data = {
            classify: [{
                name: '综合',
                type: '0'
            },{
                name: '动物类',
                type: '1'
            },{
                name: '植物类',
                type: '2'
            },{
                name: '菜品类',
                type: '3'
            },{
                name: '汽车类',
                type: '4'
            },{
                name: '文字类',
                type: '6'
            }],
            classifyIndex: 0,
            time: [{
                name: '最近三天',
                type: '3'
            },{
                name: '全部',
                type: 'all'
            }],
            timeIndex: 0,
            toggleView: true,
            // 列表记录数据
            list: [],
            // tabs状态值
            type: 1,
            page: 1,
            limit: 10,
            maxPage: 0,
            none: false,
            titleBarHeight: 0,
            // 插屏广告
            interstitialAd: null
        }
        onShareAppMessage(res) {
            if (res.from === 'button') {
                console.log(res.target)
            }
            return {
                title: '识图AI',
                path: `/views/home/home`
            }
        }
        // 获取首页数据
        async getList(sign) {
            try {
                let {
                    list,
                    current_page,
                    last_page,
                    total
                } = await getAnalysisList(Number(this.classify[this.classifyIndex].type), this.page, this.limit, this.time[this.timeIndex].type)
                if (this.page == 1 && sign) {
                    this.list = list
                } else {
                    this.list = [...this.list, ...list]
                }
                console.log(this.list)
                this.count = total
                this.maxPage = last_page
                if(current_page == last_page || last_page == 0) {
                    this.none = true
                }
            } catch (error) {
                console.log(error)
            } finally {
                wepy.stopPullDownRefresh()
                this.$apply()
                if(this.page == 1 && sign) {
                    wepy.pageScrollTo({
                        scrollTop: 0,
                        duration: 500
                    })
                }
            }
        }
        // 下拉刷新
        onPullDownRefresh() {
            this.page = 1
            this.none = false
            this.getList('PullDown')
        }
        // 上拉加载
        onReachBottom() {
            if (this.page == this.maxPage) {
                this.none = true
            } else {
                this.page++
                this.getList()
            }
        }
        ad() {
            // 在页面onLoad回调事件中创建插屏广告实例
            if (wx.createInterstitialAd) {
                this.interstitialAd = wx.createInterstitialAd({
                    adUnitId: wepy.getStorageSync('config')[1]['unit-id']
                })
                this.interstitialAd.onLoad(() => {})
                this.interstitialAd.onError((err) => {})
                this.interstitialAd.onClose(() => {})
            }
            // 在适合的场景显示插屏广告
            if (this.interstitialAd) {
                this.interstitialAd.show().catch((err) => {
                    console.error(err)
                })
            }
        }
        async onLoad() {
            try {
                let {
                    model,
                    statusBarHeight
                } = await wepy.getSystemInfo()
                if (model.indexOf('iPhone') !== -1) {
                    this.titleBarHeight = 44
                } else {
                    this.titleBarHeight = 48
                }
                this.titleBarHeight += statusBarHeight
                this.getList('PullDown')
            } catch (error) {
                console.log(error)
            }
        }
    }
</script>

<style lang="stylus">
    page
        padding-bottom 180px
    .tabs_box
        padding 0 32px
        background-color #fff
        position fixed
        top 0
        left 0
        right 0
        height 88px
        line-height 88px
        display flex
        justify-content space-between
        align-items center
        border-top 1px solid #EDEEF0
        z-index 999
        .picker_type_box
        .picker_time_box
            font-size 28px
            picker
                position relative
                z-index 1
                color #525866
                view
                    &:after
                        display inline-block
                        margin-left 5px
                        content '\e635'
                        font-family 'icon'
                        font-size 40px
                        color #292C33
                        transform translateY(5px)
        .picker_time_box
            margin-right 200px
        .toggle_view
            position relative
            &:after
                content ''
                position absolute
                top 50%
                left -40px
                transform translateY(-50%) scaleX(0.5)
                height 40px
                width 2px
                background-color #E5E5E5
            .icon
                font-size 50px
                color #525866
    .list_box
        padding 92px 32px 0
        display flex
        flex-wrap wrap
        justify-content space-between
        .item
            margin-top 8px
            .item_imgs
                width 218px
                height 218px
                image
                    width 100%
                    height 100%
            .item_info
                padding 12px 0
                .item_name
                .item_date
                    line-height 34px
                    font-size 24px
                    color #A7A7A7
                .item_name
                    color #292C33
                    text
                        color #292C33
                        font-weight 700
        &.view3
            &:after
                content ''
                width calc(100% / 3)
            .item
                width calc(100% / 3)
        &.view2
            &:after
                content ''
                width calc(calc(100% / 2) - 10px)
            .item
                width calc(calc(100% / 2) - 10px)
                .item_imgs
                    width 332px
                    height 332px
    .result_none
        padding-top 100px
        color #292C33
        font-size 24px
</style>
